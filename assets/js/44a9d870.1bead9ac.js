"use strict";(self.webpackChunkkywk_moco=self.webpackChunkkywk_moco||[]).push([[1244],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return v}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(n),v=r,m=d["".concat(s,".").concat(v)]||d[v]||p[v]||l;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:function(e,t,n){n.d(t,{Z:function(){return i}});var a=n(7294),r=n(6010),l="tabItem_Ymn6";function i(e){var t=e.children,n=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,i),hidden:n},t)}},5488:function(e,t,n){n.d(t,{Z:function(){return v}});var a=n(3117),r=n(7294),l=n(6010),i=n(2389),o=n(7392),s=n(7094),u=n(2466),c="tabList__CuJ",p="tabItem_LNqP";function d(e){var t,n,i=e.lazy,d=e.block,v=e.defaultValue,m=e.values,h=e.groupId,f=e.className,g=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=m?m:g.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),b=(0,o.l)(k,(function(e,t){return e.value===t.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var T=null===v?v:null!=(t=null!=v?v:null==(n=g.find((function(e){return e.props.default})))?void 0:n.props.value)?t:g[0].props.value;if(null!==T&&!k.some((function(e){return e.value===T})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+T+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=(0,s.U)(),N=y.tabGroupChoices,x=y.setTabGroupChoices,S=(0,r.useState)(T),I=S[0],Z=S[1],w=[],A=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var O=N[h];null!=O&&O!==I&&k.some((function(e){return e.value===O}))&&Z(O)}var j=function(e){var t=e.currentTarget,n=w.indexOf(t),a=k[n].value;a!==I&&(A(t),Z(a),null!=h&&x(h,String(a)))},L=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a,r=w.indexOf(e.currentTarget)+1;n=null!=(a=w[r])?a:w[0];break;case"ArrowLeft":var l,i=w.indexOf(e.currentTarget)-1;n=null!=(l=w[i])?l:w[w.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":d},f)},k.map((function(e){var t=e.value,n=e.label,i=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:I===t?0:-1,"aria-selected":I===t,key:t,ref:function(e){return w.push(e)},onKeyDown:L,onFocus:j,onClick:j},i,{className:(0,l.Z)("tabs__item",p,null==i?void 0:i.className,{"tabs__item--active":I===t})}),null!=n?n:t)}))),i?(0,r.cloneElement)(g.filter((function(e){return e.props.value===I}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==I})}))))}function v(e){var t=(0,i.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},983:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return v}});var a=n(3117),r=n(102),l=(n(7294),n(3905)),i=n(5488),o=n(5162),s=["components"],u={title:"Binary Search Tree",tags:["study","algorithm","cs","leetcode"],date:new Date("2022-05-30T00:00:00.000Z"),categories:["algorithm"]},c="Binary Search Tree",p={unversionedId:"study/cs_algorithm/bst",id:"study/cs_algorithm/bst",title:"Binary Search Tree",description:"Binary Search Tree",source:"@site/docs/study/cs_algorithm/bst.md",sourceDirName:"study/cs_algorithm",slug:"/study/cs_algorithm/bst",permalink:"/moco/docs/study/cs_algorithm/bst",draft:!1,tags:[{label:"study",permalink:"/moco/docs/tags/study"},{label:"algorithm",permalink:"/moco/docs/tags/algorithm"},{label:"cs",permalink:"/moco/docs/tags/cs"},{label:"leetcode",permalink:"/moco/docs/tags/leetcode"}],version:"current",frontMatter:{title:"Binary Search Tree",tags:["study","algorithm","cs","leetcode"],date:"2022-05-30T00:00:00.000Z",categories:["algorithm"]},sidebar:"tutorialSidebar",previous:{title:"Awesome Resources",permalink:"/moco/docs/study/cs_algorithm/awesome"},next:{title:"Binary Heap",permalink:"/moco/docs/study/cs_algorithm/heap"}},d={},v=[{value:"Data Struct",id:"data-struct",level:2},{value:"w/ parent",id:"w-parent",level:3},{value:"w/o parent",id:"wo-parent",level:3},{value:"ADT Basic Operate",id:"adt-basic-operate",level:2},{value:"Search(v)",id:"searchv",level:3},{value:"Insert(v)",id:"insertv",level:3},{value:"Remove(v)",id:"removev",level:3},{value:"Find &amp; Travsal",id:"find--travsal",level:2},{value:"Min / Max",id:"min--max",level:3},{value:"Predecessor",id:"predecessor",level:3},{value:"Successor",id:"successor",level:3},{value:"Inorder Traversal",id:"inorder-traversal",level:3},{value:"AVL Tree",id:"avl-tree",level:2},{value:"height(v)",id:"heightv",level:3},{value:"rotate Left/Right",id:"rotate-leftright",level:3},{value:"insert()",id:"insert",level:3},{value:"\u5c0f\u7d50",id:"\u5c0f\u7d50",level:2},{value:"See Also",id:"see-also",level:2},{value:"BST",id:"bst",level:3},{value:"Inheritance \u7e7c\u627f",id:"inheritance-\u7e7c\u627f",level:3}],m={toc:v};function h(e){var t=e.components,n=(0,r.Z)(e,s);return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"binary-search-tree"},"Binary Search Tree"),(0,l.kt)("p",null,"Binary Search Tree \u57fa\u672c\u6982\u5ff5\u662f\u6bcf\u4e00\u500b\u7bc0\u9ede\u6700\u591a\u6709\u5de6\u53f3\u5404\u4e00\u500b\u5b50\u7bc0\u9ede,\n\u5de6\u5b50\u7bc0\u9ede\u7684\u503c\u5c0f\u65bc\u81ea\u8eab\u7bc0\u9ede\u7684\u503c, \u53f3\u5b50\u7bc0\u9ede\u5247\u5927\u65bc\u672c\u8eab."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"A Binary Search Tree (BST) is a binary tree in which each vertex\nhas only up to 2 children that satisfies BST property:\nAll vertices in the left subtree of a vertex must hold a value\nsmaller than its own and all vertices in the right subtree of a\nvertex must hold a value larger than its own."),(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("a",{parentName:"p",href:"https://visualgo.net/en/bst?slide=1"},(0,l.kt)("em",{parentName:"a"},"Binary Search Tree, AVL Tree - VisuAlgo")))),(0,l.kt)("p",null,"\u53ea\u8981\u7b26\u5408\u4e0a\u8ff0\u5b9a\u7fa9, \u7121\u8ad6\u6a39\u9577\u5f97\u5982\u4f55, \u90fd\u7b26\u5408 BST \u7684\u898f\u7bc4.",(0,l.kt)("br",{parentName:"p"}),"\n","BST \u5728\u641c\u5c0b\u8cc7\u6599\u4e0a\u6709 O(log N) \u8907\u96dc\u5ea6\u512a\u52e2, \u662f\u5f88\u5e38\u4f7f\u7528\u7684\u57fa\u790e\u8cc7\u6599\u7d50\u69cb."),(0,l.kt)("h2",{id:"data-struct"},"Data Struct"),(0,l.kt)("p",null,"\u4e00\u822c\u7528\u8cc7\u6599\u7d50\u69cb\u4f86\u8868\u793a\u4e8c\u5143\u6a39\u7bc0\u9ede\u6709\u5169\u7a2e\u65b9\u5f0f:"),(0,l.kt)("h3",{id:"w-parent"},"w/ parent"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"struct node {\n    int value;\n    node *parent;\n    node *l_child;\n    node *r_child;\n}\n")),(0,l.kt)("h3",{id:"wo-parent"},"w/o parent"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"struct node {\n    int value;\n    node *l_child;\n    node *r_child;\n}\n")),(0,l.kt)("p",null,"\u5169\u8005\u7684\u5dee\u5225\u81f3\u5728\u65bc\u7bc0\u9ede\u5b9a\u7fa9\u4e2d\u662f\u5426\u5305\u542b\u6307\u5411\u7236\u7bc0\u9ede\u7684\u5c6c\u6027, \u7bc0\u9ede\u9593\u7684\u9023\u7d50\u662f\u55ae\u5411\u9084\u662f\u96d9\u5411\u95dc\u4fc2."),(0,l.kt)("p",null,"\u5305\u542b\u7236\u7bc0\u9ede\u7684\u8cc7\u6599\u7d50\u69cb\u96d9\u5411\u9023\u7d50\u7684\u5c6c\u6027, \u5f9e\u4e8c\u5143\u6a39\u4e2d\u4efb\u4e00\u7bc0\u9ede\u5de1\u8a2a, \u7686\u53ef\u5b8c\u6574\u9084\u539f\u5b8c\u6574\u4e8c\u5143\u6a39\u7684\u8cc7\u6599.\n\u82e5\u6709\u9700\u8981, \u53ef\u4ee5\u5f9e\u4efb\u4f55\u4e00\u500b\u7bc0\u9ede\u958b\u59cb\u5c0b\u8a2a, \u7121\u9808\u6bcf\u4e00\u6b21\u90fd\u5fc5\u9808\u5f9e Root \u958b\u59cb\u5de1\u8a2a.\n\u4f46\u7576\u4fee\u6539\u4e8c\u5143\u6a39\u4e2d\u7684\u8cc7\u6599\u6642, \u9700\u8981\u6ce8\u610f\u7dad\u8b77\u7bc0\u9ede\u4e2d\u7684\u9023\u7d50\u95dc\u4fc2, \u5c24\u5176\u662f\u7236\u7bc0\u9ede\u7684\u9023\u7d50."),(0,l.kt)("p",null,"\u800c\u4e0d\u5305\u542b\u7236\u7bc0\u9ede\u7684\u7d50\u69cb\u4e2d, API \u547c\u53eb\u57fa\u672c\u4e0a\u90fd\u5fc5\u9808\u5f9e Root \u958b\u59cb\u5de1\u8a2a.\n\u4f46\u76f8\u5c0d\u4fee\u6539\u8cc7\u6599\u6642, \u53ea\u9700\u8981\u8655\u7406\u5b50\u7bc0\u9ede\u7684\u55ae\u5411\u9023\u7d50\u95dc\u4fc2, \u7a0b\u5f0f\u7d50\u69cb\u90fd\u6bd4\u8f03\u7c21\u55ae."),(0,l.kt)("p",null,"\u5169\u8005\u5404\u6709\u512a\u7f3a\u9ede, \u4f9d\u5be6\u52d9\u9700\u6c42\u6c7a\u5b9a. \u672c\u7bc7\u9078\u7528\u4e0d\u5305\u62ec\u7236\u9023\u7d50\u7684\u7d50\u69cb. "),(0,l.kt)("h2",{id:"adt-basic-operate"},"ADT Basic Operate"),(0,l.kt)("p",null,"BST (and especially balanced BST like AVL Tree) is an efficient\ndata structure to implement a certain kind of Table (or Map)\nAbstract Data Type (ADT)."),(0,l.kt)("p",null,"A Table ADT must support at least the following three operations\nas efficient as possible:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Search(v) \u2014 determine if v exists in the ADT or not,"),(0,l.kt)("li",{parentName:"ul"},"Insert(v) \u2014 insert v into the ADT,"),(0,l.kt)("li",{parentName:"ul"},"Remove(v) \u2014 remove v from the ADT.")),(0,l.kt)("h3",{id:"searchv"},"Search(v)"),(0,l.kt)(i.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"go",label:"Go",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"func (n *Node) search(v int) bool {\n    if n == nil { return false }\n    if n.value == v { return true }\n    if n.value > v { return n.left.search(v)} \n    else { return n.right.search(v)}\n}\n"))),(0,l.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},""))),(0,l.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},""))),(0,l.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"")))),(0,l.kt)("h3",{id:"insertv"},"Insert(v)"),(0,l.kt)(i.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"go",label:"Go",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"func (n *Node) insert(v int) {\n    if n.value <= 0 {\n        n.value = v\n        return\n    }\n\n    if n.value > v {\n        if n.left != nil { n.left.insert(v) } \n        else { n.left = &Node{v, nil, nil} }\n    } else {\n        if n.right != nil { n.right.insert(v) } \n        else { n.right = &Node{v, nil, nil} }\n    }\n}\n"))),(0,l.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},""))),(0,l.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},""))),(0,l.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"")))),(0,l.kt)("h3",{id:"removev"},"Remove(v)"),(0,l.kt)(i.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"go",label:"Go",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"func (n *Node) doRemove(v int) *Node {\n    if n == nil { return nil }\n    if n.value > v {\n        n.left = n.left.doRemove(v)\n        return n\n    }\n    if n.value < v {\n        n.right = n.right.doRemove(v)\n        return n\n    }\n    // n.value = v\n    if n.left == nil && n.right == nil { return nil }\n    if n.left == nil { return n.right }\n    if n.right == nil { return n.left }\n\n    successor := n.right.findMaxNode()\n    n.value, successor.value = successor.value, n.value\n    n.right = n.right.doRemove(v)\n    return n\n}\n"))),(0,l.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},""))),(0,l.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},""))),(0,l.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"")))),(0,l.kt)("h2",{id:"find--travsal"},"Find & Travsal"),(0,l.kt)("h3",{id:"min--max"},"Min / Max"),(0,l.kt)(i.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"go",label:"Go",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"func (n *Node) findMin() int {\n    if n == nil { return -1 }\n    if n.left == nil { return n.value }\n    return n.left.findMin()\n}\n\nfunc (n *Node) findMax() int {\n    if n == nil { return -1 }\n    if n.right == nil { return n.value }\n    return n.right.findMax()\n}\n"))),(0,l.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},""))),(0,l.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},""))),(0,l.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"")))),(0,l.kt)("h3",{id:"predecessor"},"Predecessor"),(0,l.kt)(i.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"go",label:"Go",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"func (n *Node) findPredecessor(v int) int {\n    predecessor := -1\n    for n != nil && n.value != v {\n        if n.value < v {\n            predecessor = n.value\n            n = n.right\n        } else {\n            n = n.left\n        }\n    }\n\n    if n == nil { return -1 }\n    if n.left != nil { return n.left.findMax() } \n    else { return predecessor }\n}\n"))),(0,l.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},""))),(0,l.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},""))),(0,l.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"")))),(0,l.kt)("h3",{id:"successor"},"Successor"),(0,l.kt)(i.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"go",label:"Go",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"func (n *Node) findSuccessor(v int) int {\n    successor := -1\n    for n != nil && n.value != v {\n        if n.value > v {\n            successor = n.value\n            n = n.left\n        } else {\n            n = n.right\n        }\n    }\n\n    if n == nil { return -1 }\n    if n.right != nil { return n.right.findMin() } \n    else { return successor }\n}\n"))),(0,l.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},""))),(0,l.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},""))),(0,l.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"")))),(0,l.kt)("h3",{id:"inorder-traversal"},"Inorder Traversal"),(0,l.kt)("p",null,"An Inorder Traversal of this BST to obtain a list of sorted\nintegers inside this BST."),(0,l.kt)("p",null,"Inorder Traversal is a recursive method whereby we visit\nthe left subtree first, exhausts all items in the left subtree,\nvisit the current root, before exploring the right subtree and\nall items in the right subtree. "),(0,l.kt)(i.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"go",label:"Go",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"func (n *Node) inorder(nums *[]int) {\n    if n == nil { return }\n    n.left.inorder(nums)\n    *nums = append(*nums, n.value)\n    n.right.inorder(nums)\n}\n"))),(0,l.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},""))),(0,l.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},""))),(0,l.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"")))),(0,l.kt)("h2",{id:"avl-tree"},"AVL Tree"),(0,l.kt)("p",null,"A balanced BST is a BST that h = O(log N).\nAVL Tree (Adelson-Velskii & Landis, 1962) that is named after its\ninventor: Adelson-Velskii and Landis."),(0,l.kt)("h3",{id:"heightv"},"height(v)"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"height(v)"),": The number of edges on the path from vertex v down to\nits deepest leaf. This attribute is saved in each vertex so we can\naccess a vertex's height in ",(0,l.kt)("strong",{parentName:"p"},"O(1)")," without having to recompute it\nevery time."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"v.height = -1 (if v is an empty tree)\nv.height = max(v.left.height, v.right.height) + 1 (otherwise)\n\n// Balance Factor\nv.bf = v.left.height - v.right.height\n")),(0,l.kt)("h3",{id:"rotate-leftright"},"rotate Left/Right"),(0,l.kt)(i.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"go",label:"Go",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"func (avl *AVLNode) rotateLeft() *AVLNode {\n    result := avl.right\n    t := result.left\n    avl.right = t\n    avl.height--\n    result.left = avl\n    result.height++\n    return result\n}\n\nfunc (avl *AVLNode) rotateRight() *AVLNode {\n    result := avl.left\n    t := result.right\n    avl.left = t\n    avl.height--\n    result.right = avl\n    result.height++\n    return result\n}\n"))),(0,l.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},""))),(0,l.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},""))),(0,l.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"")))),(0,l.kt)("h3",{id:"insert"},"insert()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"insert v\ncheck balance factor of this and its children\n  case1: this.rotateRight\n  case2: this.left.rotateLeft, this.rotateRight\n  case3: this.rotateLeft\n  case4: this.right.rotateRight, this.rotateLeft\n  this is balanced\n")),(0,l.kt)(i.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"go",label:"Go",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"func (avl *AVLNode) insert(v int) {\n    if avl.value <= 0 {\n        avl.value = v\n        return\n    }\n    if avl.value > v { avl.left = avl.left.doInsert(v) } \n    else { avl.right = avl.right.doInsert(v) }\n}\n\nfunc (avl *AVLNode) doInsert(v int) *AVLNode {\n    if avl == nil { return newAVLNode(v) }\n    if avl.value > v { avl.left = avl.left.doInsert(v) } \n    else { avl.right = avl.right.doInsert(v) }\n    return avl.rotateInsert(v)\n}\n\nfunc (avl *AVLNode) rotateInsert(v int) *AVLNode {\n    avl.updateHeight()\n    bf := avl.balanceFactor()\n\n    if bf > 1 {\n        if v > avl.left.value { avl.left = avl.left.rotateLeft() }\n        return avl.rotateRight()\n    } else if bf < -1 {\n        if v < avl.right.value { avl.right = avl.right.rotateRight() }\n        return avl.rotateLeft()\n    } else {\n        return avl\n    }\n}\n"))),(0,l.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},""))),(0,l.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},""))),(0,l.kt)(o.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"")))),(0,l.kt)("h2",{id:"\u5c0f\u7d50"},"\u5c0f\u7d50"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/moco/docs/study/cs_algorithm/heap"},"Binary Heap")," \u4e00\u4e9b\u7279\u6027\u9069\u5408\u7df4\u7fd2\u8207\u89e3\u91cb Class \u4e2d\u7684 private / public / class method.\n\u800c BST / AVL Tree \u5247\u5f88\u9069\u5408 OOP \u4e2d\u7684\u7e7c\u627f\u548c\u5c01\u88dd\u6982\u5ff5. "),(0,l.kt)("p",null,"AVL Tree \u4ea6\u662f\u4e00\u7a2e BST, \u6240\u6709\u5c0d BST \u7684\u64cd\u4f5c\u90fd\u9069\u7528\u65bc AVL Tree.\n\u9069\u5408\u985e\u5225\u754c\u9762\u5c01\u88dd\u6982\u5ff5. \u64cd\u4f5c\u6642\u7121\u9808\u8003\u616e\u662f\u7531\u90a3\u4e00\u7a2e Tree \u5be6\u4f5c, \u900f\u904e\u985e\u5225\u5c01\u88dd\u754c\u9762\u64cd\u4f5c\u5373\u53ef. "),(0,l.kt)("p",null,"\u53e6\u4e00\u9ede\u5247\u662f\u5be6\u4f5c\u4e0a AVL Tree \u4e2d\u8a31\u591a\u51fd\u5f0f\u90fd\u53ef\u4ee5\u76f4\u63a5\u6cbf\u7528 BST \u754c\u9762,\n\u9069\u5408\u7528\u7e7c\u627f\u5df2\u5229\u7a0b\u5f0f\u91cd\u8907\u4f7f\u7528\u8207\u7dad\u8b77."),(0,l.kt)("p",null,"\u9019\u908a\u4ee5\u5404\u8a9e\u8a00\u4e2d\u539f\u751f\u6216\u6a21\u64ec\u7e7c\u627f\u7684\u65b9\u5f0f\u5be6\u4f5c AVL \u5c0d BST \u7684\u7e7c\u627f."),(0,l.kt)("p",null,"\u800c\u9650\u65bc Golang \u7684\u7279\u6027, \u7e7c\u627f\u548c Overriding \u6703\u8b93\u7a0b\u5f0f\u8b8a\u5f97\u904e\u65bc\u8907\u96dc,\n\u53cd\u5012\u5931\u53bb Golang keep in simple \u54f2\u5b78, \u50c5\u7528 interface \u4f86\u5c01\u88dd AVL Tree Node."),(0,l.kt)("h2",{id:"see-also"},"See Also"),(0,l.kt)("h3",{id:"bst"},"BST"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://visualgo.net/en/bst"},"Binary Search Tree, AVL Tree - VisuAlgo")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://levelup.gitconnected.com/58f9126eb36b"},"Binary Search Trees in Go. Introduction | by Puneeth S | Level Up Coding"))),(0,l.kt)("h3",{id:"inheritance-\u7e7c\u627f"},"Inheritance \u7e7c\u627f"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Golang",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://opensourcedoc.com/golang-programming/interface/"},"[Golang] \u7a0b\u5f0f\u8a2d\u8a08\u6559\u5b78\uff1a\u7528\u4ecb\u9762 (Interface) \u5be6\u8e10\u7e7c\u627f\u548c\u591a\u578b | \u958b\u6e90\u6280\u8853\u6559\u5b78\u7db2")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://learnku.com/articles/32295"},"\u79d2\u61c2 go \u8bed\u8a00\u7684\u7ee7\u627f | Go \u6280\u672f\u8bba\u575b"),"  "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.gushiciku.cn/pl/2txm/zh-tw"},"Golang OOP\u3001\u7e7c\u627f\u3001\u7d44\u5408\u3001\u4ecb\u9762_Go\u8a9e\u8a00\u4e2d\u6587\u7db2 - MdEditor"))))))}h.isMDXComponent=!0}}]);