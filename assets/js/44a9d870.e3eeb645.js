"use strict";(self.webpackChunkkywk_moco=self.webpackChunkkywk_moco||[]).push([[1244],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),s=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),d=s(t),m=r,v=d["".concat(i,".").concat(m)]||d[m]||p[m]||l;return t?a.createElement(v,o(o({ref:n},c),{},{components:t})):a.createElement(v,o({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=d;var u={};for(var i in n)hasOwnProperty.call(n,i)&&(u[i]=n[i]);u.originalType=e,u.mdxType="string"==typeof e?e:r,o[1]=u;for(var s=2;s<l;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5162:function(e,n,t){t.d(n,{Z:function(){return o}});var a=t(7294),r=t(6010),l="tabItem_Ymn6";function o(e){var n=e.children,t=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:t},n)}},5488:function(e,n,t){t.d(n,{Z:function(){return m}});var a=t(3117),r=t(7294),l=t(6010),o=t(2389),u=t(7392),i=t(7094),s=t(2466),c="tabList__CuJ",p="tabItem_LNqP";function d(e){var n,t,o=e.lazy,d=e.block,m=e.defaultValue,v=e.values,f=e.groupId,b=e.className,h=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=v?v:h.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),g=(0,u.l)(k,(function(e,n){return e.value===n.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===m?m:null!=(n=null!=m?m:null==(t=h.find((function(e){return e.props.default})))?void 0:t.props.value)?n:h[0].props.value;if(null!==y&&!k.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var T=(0,i.U)(),N=T.tabGroupChoices,x=T.setTabGroupChoices,S=(0,r.useState)(y),w=S[0],Z=S[1],I=[],O=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var j=N[f];null!=j&&j!==w&&k.some((function(e){return e.value===j}))&&Z(j)}var B=function(e){var n=e.currentTarget,t=I.indexOf(n),a=k[t].value;a!==w&&(O(n),Z(a),null!=f&&x(f,String(a)))},A=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a,r=I.indexOf(e.currentTarget)+1;t=null!=(a=I[r])?a:I[0];break;case"ArrowLeft":var l,o=I.indexOf(e.currentTarget)-1;t=null!=(l=I[o])?l:I[I.length-1]}null==(n=t)||n.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":d},b)},k.map((function(e){var n=e.value,t=e.label,o=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===n?0:-1,"aria-selected":w===n,key:n,ref:function(e){return I.push(e)},onKeyDown:A,onFocus:B,onClick:B},o,{className:(0,l.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":w===n})}),null!=t?t:n)}))),o?(0,r.cloneElement)(h.filter((function(e){return e.props.value===w}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==w})}))))}function m(e){var n=(0,o.Z)();return r.createElement(d,(0,a.Z)({key:String(n)},e))}},983:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return m}});var a=t(3117),r=t(102),l=(t(7294),t(3905)),o=t(5488),u=t(5162),i=["components"],s={title:"Binary Search Tree",tags:["study","algorithm","cs","leetcode"],date:new Date("2022-05-30T00:00:00.000Z"),categories:["algorithm"]},c="Binary Search Tree",p={unversionedId:"study/cs_algorithm/bst",id:"study/cs_algorithm/bst",title:"Binary Search Tree",description:"Binary Search Tree",source:"@site/docs/study/cs_algorithm/bst.md",sourceDirName:"study/cs_algorithm",slug:"/study/cs_algorithm/bst",permalink:"/moco/docs/study/cs_algorithm/bst",draft:!1,tags:[{label:"study",permalink:"/moco/docs/tags/study"},{label:"algorithm",permalink:"/moco/docs/tags/algorithm"},{label:"cs",permalink:"/moco/docs/tags/cs"},{label:"leetcode",permalink:"/moco/docs/tags/leetcode"}],version:"current",frontMatter:{title:"Binary Search Tree",tags:["study","algorithm","cs","leetcode"],date:"2022-05-30T00:00:00.000Z",categories:["algorithm"]},sidebar:"tutorialSidebar",previous:{title:"Awesome Resources",permalink:"/moco/docs/study/cs_algorithm/awesome"},next:{title:"Binary Heap",permalink:"/moco/docs/study/cs_algorithm/heap"}},d={},m=[{value:"Data Struct",id:"data-struct",level:2},{value:"w/ parent",id:"w-parent",level:3},{value:"w/o parent",id:"wo-parent",level:3},{value:"ADT Basic Operate",id:"adt-basic-operate",level:2},{value:"Search(v)",id:"searchv",level:3},{value:"Insert(v)",id:"insertv",level:3},{value:"Remove(v)",id:"removev",level:3},{value:"Find &amp; Travsal",id:"find--travsal",level:2},{value:"Min / Max",id:"min--max",level:3},{value:"Predecessor",id:"predecessor",level:3},{value:"Successor",id:"successor",level:3},{value:"AVL Tree",id:"avl-tree",level:2},{value:"See Also",id:"see-also",level:2}],v={toc:m};function f(e){var n=e.components,t=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},v,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"binary-search-tree"},"Binary Search Tree"),(0,l.kt)("p",null,"Binary Search Tree \u57fa\u672c\u6982\u5ff5\u662f\u6bcf\u4e00\u500b\u7bc0\u9ede\u6700\u591a\u6709\u5de6\u53f3\u5404\u4e00\u500b\u5b50\u7bc0\u9ede,\n\u5de6\u5b50\u7bc0\u9ede\u7684\u503c\u5c0f\u65bc\u81ea\u8eab\u7bc0\u9ede\u7684\u503c, \u53f3\u5b50\u7bc0\u9ede\u5247\u5927\u65bc\u672c\u8eab."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"A Binary Search Tree (BST) is a binary tree in which each vertex\nhas only up to 2 children that satisfies BST property:\nAll vertices in the left subtree of a vertex must hold a value\nsmaller than its own and all vertices in the right subtree of a\nvertex must hold a value larger than its own."),(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("a",{parentName:"p",href:"https://visualgo.net/en/bst?slide=1"},(0,l.kt)("em",{parentName:"a"},"Binary Search Tree, AVL Tree - VisuAlgo")))),(0,l.kt)("p",null,"\u53ea\u8981\u7b26\u5408\u4e0a\u8ff0\u5b9a\u7fa9, \u7121\u8ad6\u6a39\u9577\u5f97\u5982\u4f55, \u90fd\u7b26\u5408 BST \u7684\u898f\u7bc4.",(0,l.kt)("br",{parentName:"p"}),"\n","BST \u5728\u641c\u5c0b\u8cc7\u6599\u4e0a\u6709 O(log N) \u8907\u96dc\u5ea6\u512a\u52e2, \u662f\u5f88\u5e38\u4f7f\u7528\u7684\u57fa\u790e\u8cc7\u6599\u7d50\u69cb."),(0,l.kt)("h2",{id:"data-struct"},"Data Struct"),(0,l.kt)("p",null,"\u4e00\u822c\u7528\u8cc7\u6599\u7d50\u69cb\u4f86\u8868\u793a\u4e8c\u5143\u6a39\u7bc0\u9ede\u6709\u5169\u7a2e\u65b9\u5f0f:"),(0,l.kt)("h3",{id:"w-parent"},"w/ parent"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"struct node {\n    int value;\n    node *parent;\n    node *l_child;\n    node *r_child;\n}\n")),(0,l.kt)("h3",{id:"wo-parent"},"w/o parent"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"struct node {\n    int value;\n    node *l_child;\n    node *r_child;\n}\n")),(0,l.kt)("p",null,"\u5169\u8005\u7684\u5dee\u5225\u81f3\u5728\u65bc\u7bc0\u9ede\u5b9a\u7fa9\u4e2d\u662f\u5426\u5305\u542b\u6307\u5411\u7236\u7bc0\u9ede\u7684\u5c6c\u6027, \u7bc0\u9ede\u9593\u7684\u9023\u7d50\u662f\u55ae\u5411\u9084\u662f\u96d9\u5411\u95dc\u4fc2."),(0,l.kt)("p",null,"\u5305\u542b\u7236\u7bc0\u9ede\u7684\u8cc7\u6599\u7d50\u69cb\u96d9\u5411\u9023\u7d50\u7684\u5c6c\u6027, \u5f9e\u4e8c\u5143\u6a39\u4e2d\u4efb\u4e00\u7bc0\u9ede\u5de1\u8a2a, \u7686\u53ef\u5b8c\u6574\u9084\u539f\u5b8c\u6574\u4e8c\u5143\u6a39\u7684\u8cc7\u6599.\n\u82e5\u6709\u9700\u8981, \u53ef\u4ee5\u5f9e\u4efb\u4f55\u4e00\u500b\u7bc0\u9ede\u958b\u59cb\u5c0b\u8a2a, \u7121\u9808\u6bcf\u4e00\u6b21\u90fd\u5fc5\u9808\u5f9e Root \u958b\u59cb\u5de1\u8a2a.\n\u4f46\u7576\u4fee\u6539\u4e8c\u5143\u6a39\u4e2d\u7684\u8cc7\u6599\u6642, \u9700\u8981\u6ce8\u610f\u7dad\u8b77\u7bc0\u9ede\u4e2d\u7684\u9023\u7d50\u95dc\u4fc2, \u5c24\u5176\u662f\u7236\u7bc0\u9ede\u7684\u9023\u7d50."),(0,l.kt)("p",null,"\u800c\u4e0d\u5305\u542b\u7236\u7bc0\u9ede\u7684\u7d50\u69cb\u4e2d, API \u547c\u53eb\u57fa\u672c\u4e0a\u90fd\u5fc5\u9808\u5f9e Root \u958b\u59cb\u5de1\u8a2a.\n\u4f46\u76f8\u5c0d\u4fee\u6539\u8cc7\u6599\u6642, \u53ea\u9700\u8981\u8655\u7406\u5b50\u7bc0\u9ede\u7684\u55ae\u5411\u9023\u7d50\u95dc\u4fc2, \u7a0b\u5f0f\u7d50\u69cb\u90fd\u6bd4\u8f03\u7c21\u55ae."),(0,l.kt)("p",null,"\u5169\u8005\u5404\u6709\u512a\u7f3a\u9ede, \u4f9d\u5be6\u52d9\u9700\u6c42\u6c7a\u5b9a. \u672c\u7bc7\u9078\u7528\u4e0d\u5305\u62ec\u7236\u9023\u7d50\u7684\u7d50\u69cb. "),(0,l.kt)("h2",{id:"adt-basic-operate"},"ADT Basic Operate"),(0,l.kt)("p",null,"BST (and especially balanced BST like AVL Tree) is an efficient\ndata structure to implement a certain kind of Table (or Map)\nAbstract Data Type (ADT)."),(0,l.kt)("p",null,"A Table ADT must support at least the following three operations\nas efficient as possible:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Search(v) \u2014 determine if v exists in the ADT or not,"),(0,l.kt)("li",{parentName:"ul"},"Insert(v) \u2014 insert v into the ADT,"),(0,l.kt)("li",{parentName:"ul"},"Remove(v) \u2014 remove v from the ADT.")),(0,l.kt)("h3",{id:"searchv"},"Search(v)"),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"go",label:"Go",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"func (bst *BST) Search(v int) bool {\n    if bst.root == nil {\n        return false\n    }\n    if bst.root.search((v)) == nil {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc (n *Node) search(v int) *Node {\n    if n.value == v {\n        return n\n    }\n\n    if n.value > v {\n        if n.left == nil {\n            return nil\n        }\n        return n.left.search(v)\n    } else {\n        if n.right == nil {\n            return nil\n        }\n        return n.right.search(v)\n    }\n}\n"))),(0,l.kt)(u.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},""))),(0,l.kt)(u.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},""))),(0,l.kt)(u.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"")))),(0,l.kt)("h3",{id:"insertv"},"Insert(v)"),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"go",label:"Go",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"func (bst *BST) Insert(v int) {\n    if bst.root == nil {\n        bst.root = &Node{v, nil, nil}\n    } else {\n        bst.root.insert(v)\n    }\n}\n\nfunc (n *Node) insert(v int) {\n    if n.value > v {\n        if n.left != nil {\n            n.left.insert(v)\n        } else {\n            n.left = &Node{v, nil, nil}\n        }\n    } else {\n        if n.right != nil {\n            n.right.insert(v)\n        } else {\n            n.right = &Node{v, nil, nil}\n        }\n    }\n}\n"))),(0,l.kt)(u.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},""))),(0,l.kt)(u.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},""))),(0,l.kt)(u.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"")))),(0,l.kt)("h3",{id:"removev"},"Remove(v)"),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"go",label:"Go",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"func (bst *BST) Remove(v int) bool {\n    if bst.root == nil {\n        return false\n    }\n    if bst.root.remove(v) == nil {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc (n *Node) remove(v int) *Node {\n    if n == nil { return nil}\n    if n.value > v {\n        n.left = n.left.remove(v)\n        return n\n    }\n    if n.value < v {\n        n.right = n.right.remove(v)\n        return n\n    }\n\n    // n.value = v\n    if n.left == nil && n.right == nil { return nil }\n    if n.left == nil { return n.right }\n    if n.right == nil { return n.left }\n\n    successor := n.right.findMax()\n    n.value, successor.value = successor.value, n.value\n    n.right = n.right.remove(v)\n    return n\n}\n"))),(0,l.kt)(u.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},""))),(0,l.kt)(u.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},""))),(0,l.kt)(u.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"")))),(0,l.kt)("h2",{id:"find--travsal"},"Find & Travsal"),(0,l.kt)("h3",{id:"min--max"},"Min / Max"),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"go",label:"Go",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"func (bst *BST) FindMin() int {\n    if bst.root == nil { return -1 }\n    return bst.root.findMin().value\n}\nfunc (bst *BST) FindMax() int {\n    if bst.root == nil { return -1 }\n    return bst.root.findMax().value\n}\n\nfunc (n *Node) findMin() *Node {\n    if n.left == nil { return n }\n    return n.left.findMin()\n}\nfunc (n *Node) findMax() *Node {\n    if n.right == nil { return n }\n    return n.right.findMax()\n}\n\n"))),(0,l.kt)(u.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},""))),(0,l.kt)(u.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},""))),(0,l.kt)(u.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"")))),(0,l.kt)("h3",{id:"predecessor"},"Predecessor"),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"go",label:"Go",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"func (bst *BST) FindPredecessor(v int) int {\n    predecessor := -1\n    n := bst.root\n    for n != nil && n.value != v {\n        if n.value < v {\n            predecessor = n.value\n            n = n.right\n        } else {\n            n = n.left\n        }\n    }\n    if n == nil { return -1 }\n    if n.left != nil {\n        return n.left.findMax().value\n    } else {\n        return predecessor\n    }\n}\n"))),(0,l.kt)(u.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},""))),(0,l.kt)(u.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},""))),(0,l.kt)(u.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"")))),(0,l.kt)("h3",{id:"successor"},"Successor"),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"go",label:"Go",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"func (bst *BST) FindSuccessor(v int) int {\n    successor := -1\n    n := bst.root\n    for n != nil && n.value != v {\n        if n.value > v {\n            successor = n.value\n            n = n.left\n        } else {\n            n = n.right\n        }\n    }\n    if n == nil { return -1}\n    if n.right != nil {\n        return n.right.findMin().value\n    } else {\n        return successor\n    }\n}\n"))),(0,l.kt)(u.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},""))),(0,l.kt)(u.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},""))),(0,l.kt)(u.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"")))),(0,l.kt)("h2",{id:"avl-tree"},"AVL Tree"),(0,l.kt)("h2",{id:"see-also"},"See Also"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://visualgo.net/en/bst"},"Binary Search Tree, AVL Tree - VisuAlgo")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://levelup.gitconnected.com/58f9126eb36b"},"Binary Search Trees in Go. Introduction | by Puneeth S | Level Up Coding"))))}f.isMDXComponent=!0}}]);